/**
 * Generated by orval v7.13.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import type {
  ApiResponseCarTypeVO,
  ApiResponsePageResultCarTypeVO,
  ApiResponseVoid,
  CarTypeCreateRequest,
  CarTypeUpdateRequest,
  PageCarTypesParams,
} from '.././models'

import { axiosInstance } from '../../../../axios-instance'

export const getCarTypeController = () => {
  /**
   * 根据车型ID获取详细信息
   * @summary 获取车型详情
   */
  const getCarType = (typeId: number) => {
    return axiosInstance<ApiResponseCarTypeVO>({ url: `/resource/types/${typeId}`, method: 'GET' })
  }
  /**
   * 根据ID更新车型信息
   * @summary 更新车型
   */
  const updateCarType = (typeId: number, carTypeUpdateRequest: CarTypeUpdateRequest) => {
    return axiosInstance<ApiResponseCarTypeVO>({
      url: `/resource/types/${typeId}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: carTypeUpdateRequest,
    })
  }
  /**
   * 删除前会校验是否存在关联车辆
   * @summary 删除车型
   */
  const deleteCarType = (typeId: number) => {
    return axiosInstance<ApiResponseVoid>({ url: `/resource/types/${typeId}`, method: 'DELETE' })
  }
  /**
   * 支持名称、编码等条件筛选
   * @summary 分页查询车型
   */
  const pageCarTypes = (params?: PageCarTypesParams) => {
    return axiosInstance<ApiResponsePageResultCarTypeVO>({
      url: `/resource/types`,
      method: 'GET',
      params,
    })
  }
  /**
   * 创建新的车辆车型
   * @summary 新增车型
   */
  const createCarType = (carTypeCreateRequest: CarTypeCreateRequest) => {
    return axiosInstance<ApiResponseCarTypeVO>({
      url: `/resource/types`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: carTypeCreateRequest,
    })
  }
  return { getCarType, updateCarType, deleteCarType, pageCarTypes, createCarType }
}
export type GetCarTypeResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getCarTypeController>['getCarType']>>
>
export type UpdateCarTypeResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getCarTypeController>['updateCarType']>>
>
export type DeleteCarTypeResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getCarTypeController>['deleteCarType']>>
>
export type PageCarTypesResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getCarTypeController>['pageCarTypes']>>
>
export type CreateCarTypeResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getCarTypeController>['createCarType']>>
>
