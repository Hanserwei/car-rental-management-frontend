/**
 * Generated by orval v7.13.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import type {
  ApiResponseForumPostDetailVO,
  ApiResponseForumReplyVO,
  ApiResponsePageResultForumPostVO,
  ApiResponsePageResultQaQuestionVO,
  ApiResponseQaAnswerVO,
  ApiResponseQaQuestionDetailVO,
  ApiResponseVoid,
  ForumOfficialReplyRequest,
  ForumPostAuditRequest,
  PagePostsParams,
  PageQuestionsParams,
  QaAnswerCreateRequest,
  QaQuestionStatusUpdateRequest,
} from '.././models'

import { axiosInstance } from '../../../../axios-instance'

export const getCommunityController = () => {
  /**
   * 手动设置问答问题的当前状态
   * @summary 更新问题状态
   */
  const updateQuestionStatus = (
    questionId: number,
    qaQuestionStatusUpdateRequest: QaQuestionStatusUpdateRequest,
  ) => {
    return axiosInstance<ApiResponseVoid>({
      url: `/community/questions/${questionId}/status`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: qaQuestionStatusUpdateRequest,
    })
  }
  /**
   * 更新帖子状态，支持发布/驳回/删除
   * @summary 审核帖子
   */
  const auditPost = (postId: number, forumPostAuditRequest: ForumPostAuditRequest) => {
    return axiosInstance<ApiResponseVoid>({
      url: `/community/posts/${postId}/status`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: forumPostAuditRequest,
    })
  }
  /**
   * 管理员对问题进行回复，可选择标记为已解决
   * @summary 新增官方回答
   */
  const answerQuestion = (questionId: number, qaAnswerCreateRequest: QaAnswerCreateRequest) => {
    return axiosInstance<ApiResponseQaAnswerVO>({
      url: `/community/questions/${questionId}/answers`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: qaAnswerCreateRequest,
    })
  }
  /**
   * 管理员代表官方发表回复
   * @summary 官方回复帖子
   */
  const officialReply = (postId: number, forumOfficialReplyRequest: ForumOfficialReplyRequest) => {
    return axiosInstance<ApiResponseForumReplyVO>({
      url: `/community/posts/${postId}/official-replies`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: forumOfficialReplyRequest,
    })
  }
  /**
   * 支持关键字、状态、时间区间等过滤条件
   * @summary 分页查询问答
   */
  const pageQuestions = (params?: PageQuestionsParams) => {
    return axiosInstance<ApiResponsePageResultQaQuestionVO>({
      url: `/community/questions`,
      method: 'GET',
      params,
    })
  }
  /**
   * 返回问题详情及回答列表
   * @summary 问答详情
   */
  const getQuestionDetail = (questionId: number) => {
    return axiosInstance<ApiResponseQaQuestionDetailVO>({
      url: `/community/questions/${questionId}`,
      method: 'GET',
    })
  }
  /**
   * 支持关键字、状态、时间区间等过滤条件
   * @summary 分页查询帖子
   */
  const pagePosts = (params?: PagePostsParams) => {
    return axiosInstance<ApiResponsePageResultForumPostVO>({
      url: `/community/posts`,
      method: 'GET',
      params,
    })
  }
  /**
   * 返回帖子基本信息及回复列表
   * @summary 帖子详情
   */
  const getPostDetail = (postId: number) => {
    return axiosInstance<ApiResponseForumPostDetailVO>({
      url: `/community/posts/${postId}`,
      method: 'GET',
    })
  }
  return {
    updateQuestionStatus,
    auditPost,
    answerQuestion,
    officialReply,
    pageQuestions,
    getQuestionDetail,
    pagePosts,
    getPostDetail,
  }
}
export type UpdateQuestionStatusResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getCommunityController>['updateQuestionStatus']>>
>
export type AuditPostResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getCommunityController>['auditPost']>>
>
export type AnswerQuestionResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getCommunityController>['answerQuestion']>>
>
export type OfficialReplyResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getCommunityController>['officialReply']>>
>
export type PageQuestionsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getCommunityController>['pageQuestions']>>
>
export type GetQuestionDetailResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getCommunityController>['getQuestionDetail']>>
>
export type PagePostsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getCommunityController>['pagePosts']>>
>
export type GetPostDetailResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getCommunityController>['getPostDetail']>>
>
